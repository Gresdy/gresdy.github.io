(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{534:function(v,_,t){"use strict";t.r(_);var e=t(9),s=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"aspnetcore面试题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aspnetcore面试题"}},[v._v("#")]),v._v(" AspNetCore面试题")]),v._v(" "),_("p",[_("strong",[v._v("1、什么是dot net core的startup class?")])]),v._v(" "),_("p",[v._v("答：Startup class是dot net core应用的入口。所有的dot net core应用必须有这个class 这个类用来配置应用。")]),v._v(" "),_("p",[v._v("这个类的调用是在program main函数里面进行配置的。类的名字可以自己定义。")]),v._v(" "),_("p",[_("strong",[v._v("2、什么是中间件?")])]),v._v(" "),_("p",[v._v("答：中间件在这里是指注入到应用中处理请求和响应的组件。")]),v._v(" "),_("p",[_("strong",[v._v("3、application builder的use和run方法有什么区别?")])]),v._v(" "),_("p",[v._v("答：这两个方法都在start up class的configure方法里面调用。都是用来向应用请求管道里面添加中间件的。Use方法可以调用下一个中间件的添加，而run不会。")]),v._v(" "),_("p",[_("strong",[v._v("4、dot net core 管道里面的map拓展有什么作用?")])]),v._v(" "),_("p",[v._v("答：可以针对不同的路径添加不同的中间件。")]),v._v(" "),_("p",[_("strong",[v._v("5、dot net core里面的路径是如何处理的?")])]),v._v(" "),_("p",[v._v("答：路径处理是用来为进入的请求寻找处理函数的机制。所有的路径在函数运行开始时进行注册。")]),v._v(" "),_("p",[v._v("主要有两种路径处理方式，常规路径处理和属性路径处理。常规路径处理就是用MapRoute的方式设定调用路径，属性路径处理是指在调用函数的上方设定一个路径属性。")]),v._v(" "),_("p",[_("strong",[v._v("6、如何在dot net core中激活session功能?")])]),v._v(" "),_("p",[v._v("答：首先要添加session包. 其次要在config service方法里面添加session。然后又在configure方法里面调用usesession。")]),v._v(" "),_("p",[_("strong",[v._v("7、描述一下依赖注入后的服务生命周期?")])]),v._v(" "),_("p",[v._v("答：asp.net core主要提供了三种依赖注入的方式")]),v._v(" "),_("p",[v._v("其中AddTransient与AddSingleton比较好区别")]),v._v(" "),_("p",[v._v("AddTransient瞬时模式：每次都获取一个新的实例")]),v._v(" "),_("p",[v._v("AddSingleton单例模式：每次都获取同一个实例")]),v._v(" "),_("p",[v._v("而AddTransient与AddScoped的区别更不容易区别一点")]),v._v(" "),_("p",[v._v("首先这两种方式每次请求得到的都不是同一个对象，从这点看会发现这两个都一样。")]),v._v(" "),_("p",[v._v("但是我们可以继续分细一点，虽然不同的请求得到的结果不同，但是我们可以在同一次请求中去获取多次实例测试。")]),v._v(" "),_("p",[v._v("小总结:")]),v._v(" "),_("p",[v._v("AddTransient瞬时模式：每次请求，都获取一个新的实例。即使同一个请求获取多次也会是不同的实例")]),v._v(" "),_("p",[v._v("AddScoped：每次请求，都获取一个新的实例。同一个请求获取多次会得到相同的实例")]),v._v(" "),_("p",[v._v("AddSingleton单例模式：每次都获取同一个实例")]),v._v(" "),_("p",[_("strong",[v._v("8、dot net core跟dot net比较有哪些更好的地方?")])]),v._v(" "),_("p",[v._v("答：第一是跨平台，它可以运行在三大操作系统上面，windows， Linux和MAC。")]),v._v(" "),_("p",[v._v("第二是对架构本身安装没有依赖，因为所有的依赖都跟程序本身在一起。")]),v._v(" "),_("p",[v._v("第三是dot net core处理请求的效率更高，能够处理更多的请求。")]),v._v(" "),_("p",[v._v("第四是dot net core有更多的安装配置方法。")]),v._v(" "),_("p",[_("strong",[v._v("9、asp dot core有哪些好的功能？")])]),v._v(" "),_("p",[v._v("答：第一是依赖注入。")]),v._v(" "),_("p",[v._v("第二是日志系统架构。")]),v._v(" "),_("p",[v._v("第三是引入了一个跨平台的网络服务器，kestrel。可以没有iis, apache和nginx就可以单独运行。")]),v._v(" "),_("p",[v._v("第四是可以使用命令行创建应用。")]),v._v(" "),_("p",[v._v("第五是使用APP settings json file来配置工程。")]),v._v(" "),_("p",[v._v("第六是使用start up来注册服务。")]),v._v(" "),_("p",[v._v("第七是更好的支持异步编程。")]),v._v(" "),_("p",[v._v("第八是支持web socket和signal IR。")]),v._v(" "),_("p",[v._v("第九是对于跨网站的请求的预防和保护机制。")])])}),[],!1,null,null,null);_.default=s.exports}}]);