(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{518:function(t,a,s){"use strict";s.r(a);var n=s(9),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"apache-flink®-数据流上的有状态计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apache-flink®-数据流上的有状态计算"}},[t._v("#")]),t._v(" Apache Flink® - 数据流上的有状态计算")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("开源网址")]),t._v(" "),a("p",[t._v("官网：https://flink.apache.org/")]),t._v(" "),a("p",[t._v("github：https://github.com/apache/flink")])]),t._v(" "),a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/docker/flink.jpeg",alt:"img"}})]),t._v(" "),a("blockquote",[a("p",[t._v("Apache Flink 是一个框架和分布式处理引擎，用于在"),a("em",[t._v("无边界和有边界")]),t._v("数据流上进行有状态的计算。Flink 能在所有常见集群环境中运行，并能以内存速度和任意规模进行计算。")])]),t._v(" "),a("p",[t._v("接下来，我们来介绍一下 Flink 架构中的重要方面。")]),t._v(" "),a("h2",{attrs:{id:"处理无界和有界数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理无界和有界数据"}},[t._v("#")]),t._v(" 处理无界和有界数据")]),t._v(" "),a("p",[t._v("任何类型的数据都可以形成一种事件流。信用卡交易、传感器测量、机器日志、网站或移动应用程序上的用户交互记录，所有这些数据都形成一种流。")]),t._v(" "),a("p",[t._v("数据可以被作为 "),a("em",[t._v("无界")]),t._v(" 或者 "),a("em",[t._v("有界")]),t._v(" 流来处理。")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("无界流")]),t._v(" 有定义流的开始，但没有定义流的结束。它们会无休止地产生数据。无界流的数据必须持续处理，即数据被摄取后需要立刻处理。我们不能等到所有数据都到达再处理，因为输入是无限的，在任何时候输入都不会完成。处理无界数据通常要求以特定顺序摄取事件，例如事件发生的顺序，以便能够推断结果的完整性。")]),t._v(" "),a("li",[a("strong",[t._v("有界流")]),t._v(" 有定义流的开始，也有定义流的结束。有界流可以在摄取所有数据后再进行计算。有界流所有数据可以被排序，所以并不需要有序摄取。有界流处理通常被称为批处理")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/docker/flink01.png",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("Apache Flink 擅长处理无界和有界数据集")]),t._v(" 精确的时间控制和状态化使得 Flink 的运行时(runtime)能够运行任何处理无界流的应用。有界流则由一些专为固定大小数据集特殊设计的算法和数据结构进行内部处理，产生了出色的性能。")]),t._v(" "),a("p",[t._v("通过探索 Flink 之上构建的 "),a("a",{attrs:{href:"https://flink.apache.org/zh/usecases.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("用例"),a("OutboundLink")],1),t._v(" 来加深理解。")]),t._v(" "),a("h2",{attrs:{id:"部署应用到任意地方"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署应用到任意地方"}},[t._v("#")]),t._v(" 部署应用到任意地方")]),t._v(" "),a("p",[t._v("Apache Flink 是一个分布式系统，它需要计算资源来执行应用程序。Flink 集成了所有常见的集群资源管理器，例如 "),a("a",{attrs:{href:"https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/YARN.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hadoop YARN"),a("OutboundLink")],1),t._v("、 "),a("a",{attrs:{href:"https://mesos.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apache Mesos"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://kubernetes.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kubernetes"),a("OutboundLink")],1),t._v("，但同时也可以作为独立集群运行。")]),t._v(" "),a("p",[t._v("Flink 被设计为能够很好地工作在上述每个资源管理器中，这是通过资源管理器特定(resource-manager-specific)的部署模式实现的。Flink 可以采用与当前资源管理器相适应的方式进行交互。")]),t._v(" "),a("p",[t._v("部署 Flink 应用程序时，Flink 会根据应用程序配置的并行性自动标识所需的资源，并从资源管理器请求这些资源。在发生故障的情况下，Flink 通过请求新资源来替换发生故障的容器。提交或控制应用程序的所有通信都是通过 REST 调用进行的，这可以简化 Flink 与各种环境中的集成。")]),t._v(" "),a("h2",{attrs:{id:"运行任意规模应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行任意规模应用"}},[t._v("#")]),t._v(" 运行任意规模应用")]),t._v(" "),a("p",[t._v("Flink 旨在任意规模上运行有状态流式应用。因此，应用程序被并行化为可能数千个任务，这些任务分布在集群中并发执行。所以应用程序能够充分利用无尽的 CPU、内存、磁盘和网络 IO。而且 Flink 很容易维护非常大的应用程序状态。其异步和增量的检查点算法对处理延迟产生最小的影响，同时保证精确一次状态的一致性。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://flink.apache.org/zh/poweredby.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Flink 用户报告了其生产环境中一些令人印象深刻的扩展性数字"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("处理"),a("strong",[t._v("每天处理数万亿的事件")]),t._v(",")]),t._v(" "),a("li",[t._v("应用维护"),a("strong",[t._v("几TB大小的状态")]),t._v(", 和")]),t._v(" "),a("li",[t._v("应用"),a("strong",[t._v("在数千个内核上运行")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"利用内存性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#利用内存性能"}},[t._v("#")]),t._v(" 利用内存性能")]),t._v(" "),a("p",[t._v("有状态的 Flink 程序针对本地状态访问进行了优化。任务的状态始终保留在内存中，如果状态大小超过可用内存，则会保存在能高效访问的磁盘数据结构中。任务通过访问本地（通常在内存中）状态来进行所有的计算，从而产生非常低的处理延迟。Flink 通过定期和异步地对本地状态进行持久化存储来保证故障场景下精确一次的状态一致性。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/docker/flink02.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"docker-compose-yml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml"}},[t._v("#")]),t._v(" docker-compose.yml")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.7'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker run --name flink_jobmanager -d -t flink jobmanager")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker run --name flink_taskmanager -d -t flink taskmanager")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobmanager")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" flink"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("1.15.2\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6123"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8081:8081"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" jobmanager\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" JOB_MANAGER_RPC_ADDRESS=jobmanager\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" TZ=Asia/Shanghai\n\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("taskmanager")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" flink"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("1.15.2\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6121"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6122"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("depends_on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" jobmanager\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" taskmanager\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("links")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jobmanager:jobmanager"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" JOB_MANAGER_RPC_ADDRESS=jobmanager\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" TZ=Asia/Shanghai\n")])])]),a("h2",{attrs:{id:"deploy-sh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploy-sh"}},[t._v("#")]),t._v(" deploy.sh")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!\\bin\\bash")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" up "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);