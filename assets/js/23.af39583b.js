(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{487:function(t,a,s){"use strict";s.r(a);var n=s(9),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("JDK 19 定于 2022 年 9 月 20 日正式发布以供生产使用，非长期支持版本。不过，JDK 19 中有一些比较重要的新特性值得关注。")]),t._v(" "),a("p",[t._v("JDK 19 只有 7 个新特性：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://openjdk.org/jeps/405",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 405: Record Patterns（记录模式）"),a("OutboundLink")],1),t._v("（预览）")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://openjdk.org/jeps/422",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 422: Linux/RISC-V Port"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://openjdk.org/jeps/424",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 424: Foreign Function & Memory API（外部函数和内存 API）"),a("OutboundLink")],1),t._v("（预览）")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://openjdk.org/jeps/425",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 425: Virtual Threads（虚拟线程）"),a("OutboundLink")],1),t._v("（预览）")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://openjdk.java.net/jeps/426",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 426: Vector（向量）API"),a("OutboundLink")],1),t._v("（第四次孵化）")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://openjdk.java.net/jeps/427",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 427: Pattern Matching for switch（switch 模式匹配）"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://openjdk.org/jeps/428",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 428: Structured Concurrency（结构化并发）"),a("OutboundLink")],1),t._v("（孵化）")])]),t._v(" "),a("p",[t._v("这里只对 424、425、426、428 这 4 个我觉得比较重要的新特性进行详细介绍。")]),t._v(" "),a("p",[t._v("相关阅读："),a("a",{attrs:{href:"https://openjdk.org/projects/jdk/19/",target:"_blank",rel:"noopener noreferrer"}},[t._v("OpenJDK Java 19 文档"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"jep-424-外部函数和内存-api-预览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jep-424-外部函数和内存-api-预览"}},[t._v("#")]),t._v(" JEP 424: 外部函数和内存 API（预览）")]),t._v(" "),a("p",[t._v("Java 程序可以通过该 API 与 Java 运行时之外的代码和数据进行互操作。通过高效地调用外部函数（即 JVM 之外的代码）和安全地访问外部内存（即不受 JVM 管理的内存），该 API 使 Java 程序能够调用本机库并处理本机数据，而不会像 JNI 那样危险和脆弱。")]),t._v(" "),a("p",[t._v("外部函数和内存 API 在 Java 17 中进行了第一轮孵化，由 "),a("a",{attrs:{href:"https://openjdk.java.net/jeps/412",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 412"),a("OutboundLink")],1),t._v(" 提出。第二轮孵化由"),a("a",{attrs:{href:"https://openjdk.org/jeps/419",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 419"),a("OutboundLink")],1),t._v(" 提出并集成到了 Java 18 中，预览由 "),a("a",{attrs:{href:"https://openjdk.org/jeps/424",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 424"),a("OutboundLink")],1),t._v(" 提出并集成到了 Java 19 中。")]),t._v(" "),a("p",[t._v("在没有外部函数和内存 API 之前：")]),t._v(" "),a("ul",[a("li",[t._v("Java 通过 "),a("a",{attrs:{href:"https://hg.openjdk.java.net/jdk/jdk/file/tip/src/jdk.unsupported/share/classes/sun/misc/Unsafe.java",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("sun.misc.Unsafe")]),a("OutboundLink")],1),t._v(" 提供一些执行低级别、不安全操作的方法（如直接访问系统内存资源、自主管理内存资源等），"),a("code",[t._v("Unsafe")]),t._v(" 类让 Java 语言拥有了类似 C 语言指针一样操作内存空间的能力的同时，也增加了 Java 语言的不安全性，不正确使用 "),a("code",[t._v("Unsafe")]),t._v(" 类会使得程序出错的概率变大。")]),t._v(" "),a("li",[t._v("Java 1.1 就已通过 Java 原生接口（JNI）支持了原生方法调用，但并不好用。JNI 实现起来过于复杂，步骤繁琐（具体的步骤可以参考这篇文章："),a("a",{attrs:{href:"https://www.baeldung.com/jni",target:"_blank",rel:"noopener noreferrer"}},[t._v("Guide to JNI (Java Native Interface)"),a("OutboundLink")],1),t._v(" ），不受 JVM 的语言安全机制控制，影响 Java 语言的跨平台特性。并且，JNI 的性能也不行，因为 JNI 方法调用不能从许多常见的 JIT 优化(如内联)中受益。虽然"),a("a",{attrs:{href:"https://github.com/java-native-access/jna",target:"_blank",rel:"noopener noreferrer"}},[t._v("JNA"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://github.com/jnr/jnr-ffi",target:"_blank",rel:"noopener noreferrer"}},[t._v("JNR"),a("OutboundLink")],1),t._v("和"),a("a",{attrs:{href:"https://github.com/bytedeco/javacpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaCPP"),a("OutboundLink")],1),t._v("等框架对 JNI 进行了改进，但效果还是不太理想。")])]),t._v(" "),a("p",[t._v("引入外部函数和内存 API 就是为了解决 Java 访问外部函数和外部内存存在的一些痛点。")]),t._v(" "),a("p",[t._v("Foreign Function & Memory API (FFM API) 定义了类和接口：")]),t._v(" "),a("ul",[a("li",[t._v("分配外部内存："),a("code",[t._v("MemorySegment")]),t._v("、、"),a("code",[t._v("MemoryAddress")]),t._v("和"),a("code",[t._v("SegmentAllocator")]),t._v("）；")]),t._v(" "),a("li",[t._v("操作和访问结构化的外部内存："),a("code",[t._v("MemoryLayout")]),t._v(", "),a("code",[t._v("VarHandle")]),t._v("；")]),t._v(" "),a("li",[t._v("控制外部内存的分配和释放："),a("code",[t._v("MemorySession")]),t._v("；")]),t._v(" "),a("li",[t._v("调用外部函数："),a("code",[t._v("Linker")]),t._v("、"),a("code",[t._v("FunctionDescriptor")]),t._v("和"),a("code",[t._v("SymbolLookup")]),t._v("。")])]),t._v(" "),a("p",[t._v("下面是 FFM API 使用示例，这段代码获取了 C 库函数的 "),a("code",[t._v("radixsort")]),t._v(" 方法句柄，然后使用它对 Java 数组中的四个字符串进行排序。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 在C库路径上查找外部函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Linker")]),t._v(" linker "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Linker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nativeLinker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SymbolLookup")]),t._v(" stdlib "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" linker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defaultLookup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodHandle")]),t._v(" radixSort "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" linker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("downcallHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                             stdlib"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lookup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"radixsort"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 分配堆上内存以存储四个字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" javaStrings   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mouse"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dog"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"car"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 分配堆外内存以存储四个指针")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SegmentAllocator")]),t._v(" allocator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("implicitAllocator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MemorySegment")]),t._v(" offHeap  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" allocator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("allocateArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ValueLayout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ADDRESS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" javaStrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 将字符串从堆上复制到堆外")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" javaStrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在堆外分配一个字符串，然后存储指向它的指针")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MemorySegment")]),t._v(" cString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" allocator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("allocateUtf8String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("javaStrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    offHeap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAtIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ValueLayout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ADDRESS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5. 通过调用外部函数对堆外数据进行排序")]),t._v("\nradixSort"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("offHeap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" javaStrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MemoryAddress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6. 将(重新排序的)字符串从堆外复制到堆上")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" javaStrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MemoryAddress")]),t._v(" cStringPtr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" offHeap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAtIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ValueLayout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ADDRESS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    javaStrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cStringPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUtf8String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("javaStrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"car"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dog"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mouse"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h2",{attrs:{id:"jep-425-虚拟线程-预览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jep-425-虚拟线程-预览"}},[t._v("#")]),t._v(" JEP 425: 虚拟线程（预览）")]),t._v(" "),a("p",[t._v("虚拟线程（Virtual Thread-）是 JDK 而不是 OS 实现的轻量级线程(Lightweight Process，LWP），许多虚拟线程共享同一个操作系统线程，虚拟线程的数量可以远大于操作系统线程的数量。")]),t._v(" "),a("p",[t._v("虚拟线程在其他多线程语言中已经被证实是十分有用的，比如 Go 中的 Goroutine、Erlang 中的进程。")]),t._v(" "),a("p",[t._v("虚拟线程避免了上下文切换的额外耗费，兼顾了多线程的优点，简化了高并发程序的复杂，可以有效减少编写、维护和观察高吞吐量并发应用程序的工作量。")]),t._v(" "),a("p",[t._v("知乎有一个关于 Java 19 虚拟线程的讨论，感兴趣的可以去看看："),a("a",{attrs:{href:"https://www.zhihu.com/question/536743167",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.zhihu.com/question/536743167"),a("OutboundLink")],1),t._v(" 。")]),t._v(" "),a("p",[t._v("Java 虚拟线程的详细解读和原理可以看下面这两篇文章：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/vdLXhZdWyxc6K-D3Aj03LA",target:"_blank",rel:"noopener noreferrer"}},[t._v("虚拟线程原理及性能分析｜得物技术"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/yyApBXxpXxVwttr01Hld6Q",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java19 正式 GA！看虚拟线程如何大幅提高系统吞吐量"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/throwable/p/16758997.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("虚拟线程 - VirtualThread 源码透视"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"jep-426-向量-api-第四次孵化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jep-426-向量-api-第四次孵化"}},[t._v("#")]),t._v(" JEP 426: 向量 API（第四次孵化）")]),t._v(" "),a("p",[t._v("向量（Vector） API 最初由 "),a("a",{attrs:{href:"https://openjdk.java.net/jeps/338",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 338"),a("OutboundLink")],1),t._v(" 提出，并作为"),a("a",{attrs:{href:"http://openjdk.java.net/jeps/11",target:"_blank",rel:"noopener noreferrer"}},[t._v("孵化 API"),a("OutboundLink")],1),t._v("集成到 Java 16 中。第二轮孵化由 "),a("a",{attrs:{href:"https://openjdk.java.net/jeps/414",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 414"),a("OutboundLink")],1),t._v(" 提出并集成到 Java 17 中，第三轮孵化由 "),a("a",{attrs:{href:"https://openjdk.java.net/jeps/417",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 417"),a("OutboundLink")],1),t._v(" 提出并集成到 Java 18 中，第四轮由 "),a("a",{attrs:{href:"https://openjdk.java.net/jeps/426",target:"_blank",rel:"noopener noreferrer"}},[t._v("JEP 426"),a("OutboundLink")],1),t._v(" 提出并集成到了 Java 19 中。")]),t._v(" "),a("p",[t._v("在 "),a("RouterLink",{attrs:{to:"/01.Java基础/05.版本新特性/java18.html"}},[t._v("Java 18 新特性概览")]),t._v(" 中，我有详细介绍到向量 API，这里就不再做额外的介绍了。")],1),t._v(" "),a("h2",{attrs:{id:"jep-428-结构化并发-孵化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jep-428-结构化并发-孵化"}},[t._v("#")]),t._v(" JEP 428: 结构化并发(孵化)")]),t._v(" "),a("p",[t._v("JDK 19 引入了结构化并发，一种多线程编程方法，目的是为了通过结构化并发 API 来简化多线程编程，并不是为了取代"),a("code",[t._v("java.util.concurrent")]),t._v("，目前处于孵化器阶段。")]),t._v(" "),a("p",[t._v("结构化并发将不同线程中运行的多个任务视为单个工作单元，从而简化错误处理、提高可靠性并增强可观察性。也就是说，结构化并发保留了单线程代码的可读性、可维护性和可观察性。")]),t._v(" "),a("p",[t._v("结构化并发的基本 API 是"),a("a",{attrs:{href:"https://download.java.net/java/early_access/loom/docs/api/jdk.incubator.concurrent/jdk/incubator/concurrent/StructuredTaskScope.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("StructuredTaskScope")]),a("OutboundLink")],1),t._v("。"),a("code",[t._v("StructuredTaskScope")]),t._v(" 支持将任务拆分为多个并发子任务，在它们自己的线程中执行，并且子任务必须在主任务继续之前完成。")]),t._v(" "),a("p",[a("code",[t._v("StructuredTaskScope")]),t._v(" 的基本用法如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" scope "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StructuredTaskScope")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用fork方法派生线程来执行子任务")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" scope"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" scope"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待线程完成")]),t._v("\n        scope"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果的处理可能包括处理或重新抛出异常")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" process results"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("exceptions "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// close")]),t._v("\n")])])]),a("p",[t._v("结构化并发非常适合虚拟线程，虚拟线程是 JDK 实现的轻量级线程。许多虚拟线程共享同一个操作系统线程，从而允许非常多的虚拟线程。")])])}),[],!1,null,null,null);a.default=e.exports}}]);